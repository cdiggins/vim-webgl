/**
 * @module viw-webgl-viewer
 */
import { Viewer } from './viewer';
export declare const KEYS: {
    KEY_0: number;
    KEY_1: number;
    KEY_2: number;
    KEY_3: number;
    KEY_4: number;
    KEY_5: number;
    KEY_6: number;
    KEY_7: number;
    KEY_8: number;
    KEY_9: number;
    KEY_LEFT: number;
    KEY_RIGHT: number;
    KEY_UP: number;
    KEY_DOWN: number;
    KEY_CTRL: number;
    KEY_SHIFT: number;
    KEY_ENTER: number;
    KEY_SPACE: number;
    KEY_TAB: number;
    KEY_ESCAPE: number;
    KEY_BACKSPACE: number;
    KEY_HOME: number;
    KEY_END: number;
    KEY_INSERT: number;
    KEY_DELETE: number;
    KEY_ALT: number;
    KEY_F1: number;
    KEY_F2: number;
    KEY_F3: number;
    KEY_F4: number;
    KEY_F5: number;
    KEY_F6: number;
    KEY_F7: number;
    KEY_F8: number;
    KEY_F9: number;
    KEY_F10: number;
    KEY_F11: number;
    KEY_F12: number;
    KEY_NUMPAD0: number;
    KEY_NUMPAD1: number;
    KEY_NUMPAD2: number;
    KEY_NUMPAD3: number;
    KEY_NUMPAD4: number;
    KEY_NUMPAD5: number;
    KEY_NUMPAD6: number;
    KEY_NUMPAD7: number;
    KEY_NUMPAD8: number;
    KEY_NUMPAD9: number;
    KEY_ADD: number;
    KEY_SUBTRACT: number;
    KEY_MULTIPLY: number;
    KEY_DIVIDE: number;
    KEY_SEPARATOR: number;
    KEY_DECIMAL: number;
    KEY_OEM_PLUS: number;
    KEY_OEM_MINUS: number;
    KEY_A: number;
    KEY_B: number;
    KEY_C: number;
    KEY_D: number;
    KEY_E: number;
    KEY_F: number;
    KEY_G: number;
    KEY_H: number;
    KEY_I: number;
    KEY_J: number;
    KEY_K: number;
    KEY_L: number;
    KEY_M: number;
    KEY_N: number;
    KEY_O: number;
    KEY_P: number;
    KEY_Q: number;
    KEY_R: number;
    KEY_S: number;
    KEY_T: number;
    KEY_U: number;
    KEY_V: number;
    KEY_W: number;
    KEY_X: number;
    KEY_Y: number;
    KEY_Z: number;
};
/**
 * Manages keyboard user inputs
 */
export declare class Keyboard {
    private SHIFT_MULTIPLIER;
    private _viewer;
    private get camera();
    private get selection();
    isUpPressed: boolean;
    isDownPressed: boolean;
    isLeftPressed: boolean;
    isRightPressed: boolean;
    isEPressed: boolean;
    isQPressed: boolean;
    isShiftPressed: boolean;
    isCtrlPressed: boolean;
    constructor(viewer: Viewer);
    reset: () => void;
    onKeyUp: (event: any) => void;
    onKeyDown: (event: any) => void;
    onKey: (event: any, keyDown: boolean) => void;
    private applyMove;
}
